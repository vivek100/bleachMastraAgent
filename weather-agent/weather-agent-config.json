{
  "projectName": "weather-agent",
  "description": "A Mastra agent that fetches current weather data for any city using an external API.",
  "dependencies": {
    "@mastra/core": "latest",
    "@ai-sdk/openai": "latest",
    "zod": "latest",
    "node-fetch": "latest"
  },
  "entryPoint": {
    "type": "agent",
    "name": "weatherDataFetcherAgent"
  },
  "agents": [
    {
      "name": "weatherDataFetcherAgent",
      "instructions": "You are the main weather data retrieval agent. Your primary responsibility is to process user requests related to weather information, interpret their queries accurately, and fetch the relevant data using the weather-api tool. Ensure that you understand the user's location and weather parameters, then call the weather-api with the correct parameters. Present the data in a clear, concise, and user-friendly manner, including temperature, conditions, and any relevant warnings or alerts. Handle errors gracefully, such as invalid locations or API failures, by providing helpful fallback responses.",
      "model": "openai('gpt-4.1-nano')",
      "tools": [
        "weather-api"
      ],
      "description": "Main agent responsible for fetching weather data and handling user requests."
    },
    {
      "name": "userInteractionAgent",
      "instructions": "You are a user interaction agent responsible for managing user inputs and displaying weather information. When a user provides a weather query, parse the input to identify location and any specific details. Use the weather-api tool to fetch weather data for the specified location. Present the weather information in a clear, user-friendly format, ensuring separation of concerns by not handling data fetching directly. If the user input is unclear or incomplete, prompt for clarification. Always respond in a conversational tone and handle errors gracefully.",
      "model": "openai('gpt-4.1-nano')",
      "tools": [
        "weather-api"
      ],
      "description": "Manages user interactions and displays weather information based on user queries."
    }
  ],
  "tools": [
    {
      "name": "weather-api",
      "description": "Fetches current weather data for a specified city from an external weather service",
      "inputSchema": "z.object({ city: z.string().describe('City name to get weather for'), units: z.enum(['metric', 'imperial']).optional().describe('Temperature units') })",
      "outputSchema": "z.object({ temperature: z.number(), condition: z.string(), humidity: z.number(), city: z.string() })",
      "code": "try { const apiKey = process.env.OPENWEATHER_API_KEY; if (!apiKey) throw new Error('API key not configured'); const response = await fetch('https://api.openweathermap.org/data/2.5/weather?q=' + encodeURIComponent(city) + '&appid=' + apiKey + '&units=' + (units || 'metric')); if (!response.ok) throw new Error('Weather API error: ' + response.statusText); const data = await response.json(); return { temperature: data.main.temp, condition: data.weather[0].description, humidity: data.main.humidity, city: data.name }; } catch (error) { throw new Error('Failed to fetch weather: ' + error.message); }"
    }
  ],
  "workflows": []
}