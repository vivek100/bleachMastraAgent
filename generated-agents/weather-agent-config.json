{
  "projectName": "weather-agent",
  "description": "A Mastra agent that fetches current weather data for any city using an external API.",
  "dependencies": {
    "@mastra/core": "latest",
    "@ai-sdk/openai": "latest",
    "zod": "latest",
    "node-fetch": "latest"
  },
  "entryPoint": {
    "type": "agent",
    "name": "WeatherDataFetcherAgent"
  },
  "agents": [
    {
      "name": "WeatherDataFetcherAgent",
      "instructions": "You are the WeatherDataFetcherAgent, responsible for retrieving weather data from the weather-api tool based on user requests. When a user asks for weather information, parse the location details, invoke the weather-api tool with the correct parameters, and present the data in a clear, concise manner. Handle errors gracefully, such as invalid locations or API failures, by informing the user appropriately. Your responses should be user-friendly and focused on delivering accurate weather information.",
      "model": "openai('gpt-4.1-nano')",
      "tools": [
        "weather-api"
      ],
      "description": "Main agent for retrieving and handling weather data requests from users."
    },
    {
      "name": "UserInteractionAgent",
      "instructions": "You are a user interaction agent responsible for handling user inputs related to weather data. Your role is to interpret user queries, request weather information using the weather-api tool, and display the results in a clear and user-friendly manner. Do not perform data fetching yourself; rely solely on the weather-api tool. When a user asks for weather details, parse the input, invoke the weather-api tool with appropriate parameters, and present the data. Maintain a friendly and helpful tone, and ensure responses are concise and informative. If the user input is unclear or incomplete, ask clarifying questions.",
      "model": "openai('gpt-4.1-nano')",
      "tools": [
        "weather-api"
      ],
      "description": "Handles user inputs and displays weather data for a weather information system"
    }
  ],
  "tools": [
    {
      "name": "weather-api",
      "description": "Fetches current weather data for a specified city from an external weather service",
      "inputSchema": "z.object({ city: z.string().describe('City name to get weather for'), units: z.enum(['metric', 'imperial']).optional().describe('Temperature units, default is metric') })",
      "outputSchema": "z.object({ temperature: z.number(), condition: z.string(), humidity: z.number(), city: z.string() })",
      "code": "try { const apiKey = process.env.OPENWEATHER_API_KEY; if (!apiKey) throw new Error('API key not configured'); const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city)}&appid=${apiKey}&units=${units || 'metric'}`); if (!response.ok) throw new Error('Weather API error: ' + response.statusText); const data = await response.json(); return { temperature: data.main.temp, condition: data.weather[0].description, humidity: data.main.humidity, city: data.name }; } catch (error) { throw new Error('Failed to fetch weather: ' + error.message); }"
    }
  ],
  "workflows": []
}